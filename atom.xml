<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[grokin.gs]]></title>
  <link href="http://levigroker.github.com/atom.xml" rel="self"/>
  <link href="http://levigroker.github.com/"/>
  <updated>2013-03-26T10:51:14-06:00</updated>
  <id>http://levigroker.github.com/</id>
  <author>
    <name><![CDATA[Levi Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lion &amp; Automounter]]></title>
    <link href="http://levigroker.github.com/blog/2013/03/11/lion-and-automounter/"/>
    <updated>2013-03-11T11:05:00-06:00</updated>
    <id>http://levigroker.github.com/blog/2013/03/11/lion-and-automounter</id>
    <content type="html"><![CDATA[<p>Mounting a remote filesystem via the network is something which Unix has been doing since,
well, the dawn of Unix. So, naturally, when trying to make use of large amounts of network
storage on a NAS from a Mac OS X based machine, one would assume that mounting the network
storage and having the mountpoint be maintained automatically should be a simple Unix
configuration. And there you&#8217;d be partly correct&#8230;</p>

<p>Darwin does make use of the <code>automount</code> system to configure and maintain mountpoints, and
one can setup entries in the <code>/etc/fstab</code> to mount remote filesystems using various
protocols (NFS, SMB, AFP, etc.), and various posts about doing this have been around for
<a href="http://web.archive.org/web/20090831103644/http://blogs.sun.com/lowbit/entry/easy_afp_autmount_on_os">a long time</a>
. However, Mac OSX Lion <a href="https://discussions.apple.com/thread/3221944">seems to have broken this</a>
in such a way that the mount points are inaccessible (incorrect permissions) to all but
the <code>root</code> user.</p>

<p>Over the weekend I struggled with this for too long, and ultimately found a solution,
albeit a bit of a hack. Roll up your sleeves, get a new cup of tea, here we go&#8230;</p>

<h3>/etc/fstab</h3>

<p>As root, edit your <code>/etc/fstab</code> and add the mount point you want.
Note: <code>/etc/fstab</code> did not exist by default. No need to worry, just create it. The <em>magic</em>
syntax is:</p>

<pre><code>&lt;servername&gt;:/&lt;path&gt; &lt;mount_point&gt; url auto,url==afp://&lt;username&gt;:&lt;password&gt;@&lt;servername&gt;/&lt;path&gt; 0 0
</code></pre>

<p>Example:</p>

<pre><code>nas.grokers.net:/media /Network/media url auto,url==afp://levi:foopass@nas.grokers.net/media 0 0
</code></pre>

<p>That sets up a mount point at <code>/Network/media</code> which points to the AFP share <code>nas.grokers.net/media</code></p>

<p>If you do this, then tell <code>automount</code> to reload with <code>automount -cv</code> you&#8217;ll be able to cd into
<code>/Network/media</code> and see the remote filesystem, but only as root (in Lion, at least).</p>

<p>As an aside, it pains me to embed a password in the filesystem like this. A long time ago,
I spent a lot of effort trying to figure out a way to dynamically load the password from
the Keychain instead of embedding it here. I researched how to use executable automount
configurations so I could fetch the password using <code>/usr/bin/security</code> but ultimately
could never get it to work, so I gave up. If you&#8217;ve a way to do this, please <a href="mailto:levigroker@gmail.com">let me know</a>.</p>

<h3>root-only permissions work-around</h3>

<p>To avoid the root-only permissions on the mount point, it would appear a <a href="http://forums.plexapp.com/index.php/topic/14201-howto-automount-afpsmb-shares-using-autofs/?p=202429">solution</a>
is to unmount the mountpoint after <code>automount</code> loads the configuration in <code>/etc/fstab</code>.</p>

<p>I tried many different approaches to unmount the mountpoint using a <code>launchd</code> <code>/Library/LaunchAgent</code>
and even a user LaunchAgent, but through many attempts none of them seemed to take place
<em>after</em> <code>automount</code> had loaded the config, and thus the mountpoint was still root-only
accessible.</p>

<p>So, an AppleScript application as a Login Item seems to be the only way, but we don&#8217;t have
to embed our password (yet again) in the applescript. Instead, I created a shell script to
do the deed:</p>

<pre><code>#!/bin/bash
diskutil unmount /Network/media &gt; /dev/null 2&gt;&amp;1
exit 0
</code></pre>

<p>(I saved it at <code>/Users/levi/Library/Automation/nas_mount_helper.sh</code> but it doesn&#8217;t matter where you put it)</p>

<p>Then add a line to the <code>sudoers</code> file so the script will run as <code>root</code> without the need
for a password:</p>

<p><code>$ sudo visudo</code></p>

<pre><code>levi ALL = NOPASSWD: /Users/levi/Library/Automation/nas_mount_helper.sh
</code></pre>

<p>Now, to run this script as a Login Item, I created an AppleScript application using the
AppleScript editor app. The contents of the applescript is pretty basic:</p>

<pre><code>do shell script "sudo /Users/levi/Library/Automation/nas_mount_helper.sh"
</code></pre>

<p>Save the script as an application, and use the &#8220;Users &amp; Groups&#8221; System Preferences to add
it as a Login Item</p>

<p>Almost there&#8230;</p>

<p>Unfortunately, this didn&#8217;t quite do it. Upon login the mount couldn&#8217;t be navigated to via
the Finder because of some error about the original not being found, so&#8230;</p>

<p>Another shell script was needed to force the mount.</p>

<pre><code>#!/bin/bash
cd /Network/media
ls -la
exit 0
</code></pre>

<p>(I saved it at <code>/Users/levi/Library/Automation/nas_mount_helper2.sh</code> but it doesn&#8217;t matter where you put it)</p>

<p>This one we want to run as ourself, so no <code>sudoers</code> entry is needed.</p>

<p>Add an additional line to the applescript to run this after we unmount the share:</p>

<pre><code>do shell script "sudo /Users/levi/Library/Automation/nas_mount_helper.sh"
do shell script "/Users/levi/Library/Automation/nas_mount_helper2.sh"
</code></pre>

<h3>Extra Credit</h3>

<p>Finally, to prevent the AppleScript application from being noticeable (showing up in the dock, etc.),
add the <code>LSUIElement</code> key to the <code>Info.plist</code> of the generated AppleScript application,
by contextually clicking on the app from the Finder, choosing &#8220;Show Package Contents&#8221;,
browse to <code>Contents/Info.plist</code>, and then edit the Info.plist to add the element:</p>

<pre><code>&lt;plist version="1.0"&gt;
  &lt;dict&gt;
    ...
    &lt;key&gt;LSUIElement&lt;/key&gt;
    &lt;string&gt;1&lt;/string&gt;
    ...
  &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>Not all that elegant, unfortunately, but a workaround at least.</p>

<h3>Thanks</h3>

<p>Thanks to <a href="https://twitter.com/signed8bit">@signed8bit</a> for the moral support, and the wayback-machine.
Thanks to <a href="http://forums.plexapp.com/index.php/user/22159-soli/">Soli</a> for the unmount workaround idea.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HashBuilder]]></title>
    <link href="http://levigroker.github.com/blog/2013/02/12/hashbuilder/"/>
    <updated>2013-02-12T17:48:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2013/02/12/hashbuilder</id>
    <content type="html"><![CDATA[<p>Creating custom data objects as subclasses of NSObject is something which tends to happen
quite often, and making those objects &#8220;good citizens&#8221; which can be reliably placed into
NS collections (<code>NSDictionary</code>, <code>NSSet</code>, <code>NSArray</code>, etc.) means taking a few extra steps.
One of these steps is to override <code>NSObject</code>&#8217;s <code>- (BOOL)isEqual:(id)object</code> method, and,
of course if you do that, you should (read: <em>must</em>) also override <code>- (NSUInteger)hash</code>.</p>

<p>Providing a good hash value from your overridden <code>- (NSUInteger)hash</code> method is a deep
topic, luckily we can stand on the backs of giants, and use knowledge and techniques
which follow &#8220;known good&#8221; practices. With that in mind, I created a utility, HashBuilder,
which makes generating a suitable hash value trivial.</p>

<p><a href="https://github.com/levigroker/HashBuilder">HashBuilder</a> can be used to build a hash
result from contributed objects or hashes (presumably properties on your object which
should be considered in the isEqual: override). The intention is for the hash result to be
returned from an override to the <code>NSObject</code> <code>- (NSUInteger)hash</code> method.</p>

<h3>Documentation</h3>

<p>To use, create a HashBuilder object, contribute to it, then query the &#8216;builtHash&#8217;
property for the resulting hash.</p>

<pre><code>- (NSUInteger)hash
{
    HashBuilder *builder = [HashBuilder builder];

    [builder contributeObject:self.objectID];
    [builder contributeObject:self.occurredDate];
    [builder contributeObject:self.type];
    [builder contributeObject:self.objectURL];
    [builder contributeObject:self.tags];
    [builder contributeObject:self.count];

    NSUInteger retVal = builder.builtHash;

    return retVal;
}
</code></pre>

<p>It is prudent to consider the same properties when overriding your <code>- (BOOL)isEqual:(id)object</code>
method as well.</p>

<p>NOTE: The order of contribution <em>will</em> change the resulting hash, even if all
the same values are contributed. For example:</p>

<pre><code>HashBuilder *builder1 = [HashBuilder builder];
[builder1 contributeObject:@"a"];
[builder1 contributeObject:[NSNumber numberWithInteger:12345]];
NSUInteger hash1 = builder1.builtHash;

HashBuilder *builder2 = [HashBuilder builder];
[builder2 contributeObject:[NSNumber numberWithInteger:12345]];
[builder2 contributeObject:@"a"];
NSUInteger hash2 = builder2.builtHash;
</code></pre>

<p><code>hash1 != hash2</code></p>

<h3>Installing</h3>

<p>If you&#8217;re using <a href="http://cocopods.org">CocoPods</a> it&#8217;s as simple as adding this to your <code>Podfile</code>:</p>

<pre><code>pod 'HashBuilder', '~&gt; 1.0'
</code></pre>

<p>NOTE: HashBuilder makes use of techniques and concepts presented by <a href="http://www.mikeash.com/">Mike Ash</a> in his post entitled <a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">Implementing Equality and Hashing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Orientation Respectful UINavigationController]]></title>
    <link href="http://levigroker.github.com/blog/2012/11/16/orientationrespectfulnavigationcontroller/"/>
    <updated>2012-11-16T13:39:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2012/11/16/orientationrespectfulnavigationcontroller</id>
    <content type="html"><![CDATA[<p>While working on a project for iOS 6 I ran into an interesting issue with rotations.</p>

<p>I wanted one of my views to rotate, but not others, and since <code>UIViewController</code>&#8217;s <code>shouldAutorotateToInterfaceOrientation:</code> is deprecated in iOS 6 and the docs point at overriding <code>shouldAutorotate</code>, I swapped them out. But&#8230; <code>shouldAutorotate</code> didn&#8217;t get called. Hrm? A little poking around and I see this in the <a href="http://developer.apple.com/library/ios/#releasenotes/General/RN-iOSSDK-6_0/_index.html">iOS 6 release notes</a>:</p>

<blockquote><p>Now, iOS containers (such as UINavigationController) do not consult their children to
determine whether they should autorotate. By default, an app and a view controller’s
supported interface orientations are set to UIInterfaceOrientationMaskAll for the iPad
idiom and UIInterfaceOrientationMaskAllButUpsideDown for the iPhone idiom.</p></blockquote>

<p>So, because my views are &#8220;underneath&#8221; a <code>UINavigationController</code> their <code>shouldAutorotate</code> methods are not getting called, only the parent <code>UINavigationController</code> is queried. That seems like an odd behavior to me, but it&#8217;s easy enough to remedy. A subclass of <code>UINavigationController</code> which respects the desired behavior of the top view controller is all that&#8217;s needed.</p>

<p>This UINavigationController subclass will query it&#8217;s topmost view controller for desired rotation behavior, unlike the default implementation:</p>

<div><script src='https://gist.github.com/4090689.js'></script>
<noscript><pre><code>//
//  OrientationRespectfulNavigationController.h
//
//  Created by Levi Brown on 11/15/12.
//  Created by Levi Brown on 11/15/12. @levigroker
//  This work is licensed under a Creative Commons Attribution 3.0 Unported License
//  http://creativecommons.org/licenses/by/3.0/
//  Attribution to Levi Brown (@levigroker) is appreciated but not required.
//

/*
 This NavigationController will query it's topmost view controller for desired rotation behavior,
 unlike the default implementation.

 From the iOS 6 release notes:
 http://developer.apple.com/library/ios/#releasenotes/General/RN-iOSSDK-6_0/_index.html

 Now, iOS containers (such as UINavigationController) do not consult their children to
 determine whether they should autorotate. By default, an app and a view controller’s
 supported interface orientations are set to UIInterfaceOrientationMaskAll for the iPad
 idiom and UIInterfaceOrientationMaskAllButUpsideDown for the iPhone idiom.
 */

#import &lt;UIKit/UIKit.h&gt;

@interface OrientationRespectfulNavigationController : UINavigationController

@end
</code></pre></noscript></div>


<p>To use, simply include the source in your project, and select <code>OrientationRespectfulNavigationController</code> as the class to use in place of each <code>UINavigationController</code> you want to have this behavior:</p>

<p><img src="images/posts/2012-11-16-orientationrespectfulnavigationcontroller/IBClassConfig.png" title="XCode configuration for UINavigationController class override" alt="XCode configuration for UINavigationController class override"></p>

<p>NOTE: I&#8217;m by no means the first to figure this out. StackOverflow <a href="http://stackoverflow.com/questions/12520030/how-to-force-a-uiviewcontroller-to-portait-orientation-in-ios-6">has</a> <a href="http://stackoverflow.com/q/12777474/397210">several</a>  <a href="http://stackoverflow.com/a/12996924/397210">posts</a> which illustrate the problem and solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powerful, CocoaPods are!]]></title>
    <link href="http://levigroker.github.com/blog/2012/11/08/powerful/"/>
    <updated>2012-11-08T10:38:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2012/11/08/powerful</id>
    <content type="html"><![CDATA[<p><a href="http://cocoapods.org">CocoaPods</a>, &#8220;The Objective-C Library Manager,&#8221; is something I&#8217;ve been using now for a while and really enjoying it for integrating third party frameworks and components into my projects. If you&#8217;re not familiar with it already, I <em>highly</em> recommend you look into it as it is really powerful and useful.</p>

<h3>Installing pods for multiple targets</h3>

<p>My projects generally have at least two targets; the main target and a test target. When I initially setup CocoPods for my projects with a</p>

<pre><code>$ pod install
</code></pre>

<p>it does not configure the test target to use the <code>Pods.xcconfig</code> which specify all the integration points for the included pods. And, finding where to manually configure the use of the <code>xcconfig</code> file for the test target took me a bit of digging.</p>

<p>You&#8217;ll need to go into the project settings, on the info tab of the project (not the target) and expand each configuration in the &#8220;Configurations&#8221; area (just under &#8220;Deployment Target&#8221;). Then set each configuration to use the Pods configuration on any alternate targets (like my test target):</p>

<p><img src="images/posts/2012-11-08-powerful/PodsxcconfigConfig.png" title="XCode configuration of xcconfig usage on targets" alt="XCode configuration of xcconfig usage on targets"></p>

<p>From then on the alternate targets will inherit from the <code>Pods.xcconfig</code> configuration as they should.</p>

<p>Similarly, some of the growing pains I&#8217;ve had with my use of CocoaPods have been related to making sure the configurations inherit from the <code>Pods.xcconfig</code> configuration, specifically custom header and library search paths. So if you get build errors related to not being able to find headers or libraries double check the target&#8217;s header and library search path build settings and ensure the first element is <code>$(inhertied)</code>. In general, I&#8217;ve found the <a href="https://github.com/CocoaPods/CocoaPods/wiki">CocoPods Wiki</a> is a good place to start reading up, should you encounter issues.</p>

<h3>Using a Fork as a Pod</h3>

<p>Using &#8220;off the shelf&#8221; pods is as easy as the docs say&#8230; you simply search for the pod you want at <a href="http://cocoapods.org">http://cocoapods.org</a>, add a dependency in the <code>Podfile</code> and then run <code>pod update</code>. I&#8217;ve found, however, that sometimes I want to fork a project that I&#8217;m using as a pod so I can make changes. But how then to use the fork as a pod? It&#8217;s not hard, actually.</p>

<p>I ran into <a href="http://stackoverflow.com/a/12393865/397210">this answer</a> which pointed me to the <a href="https://github.com/CocoaPods/CocoaPods/wiki/Dependency-declaration-options">CocoPods dependency declaration wiki entry</a>. Basically, all that needs to be done is to explicitly specify the git repository to use for the pod, instead of letting it use the default repository.</p>

<p>I&#8217;ve had great luck with this approach for my extraction of the <a href="http://restkit.org">RestKit</a> ObjectMapping functionality (see my <a href="https://github.com/levigroker/RestKitObjectMapping">RestKitObjectMapping</a> fork). All I need to do now, to include this pod in my project is to add this line to my <code>Podspec</code> file:</p>

<pre><code>pod 'RestKitObjectMapping', :git =&gt; 'https://github.com/levigroker/RestKitObjectMapping.git'
</code></pre>

<p>Indeed, very powerful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Shadow Knows]]></title>
    <link href="http://levigroker.github.com/blog/2012/10/25/the-shadow-knows/"/>
    <updated>2012-10-25T16:46:00-06:00</updated>
    <id>http://levigroker.github.com/blog/2012/10/25/the-shadow-knows</id>
    <content type="html"><![CDATA[<p>Adding drop shadows is a nice little UI touch which brings depth, and I like them, assuming they&#8217;re done subtlety.</p>

<p>That said, I&#8217;ve been playing around with them a bit and have a couple of things to share.</p>

<ul>
<li>If your shadow is to be placed on a rectangular layer, use <code>layer.shadowPath</code> to increase performance.</li>
</ul>


<p>TIP: To easily create the rectangular path: <code>layer.shadowPath = [UIBezierPath bezierPathWithRect:layer.bounds].CGPath;</code></p>

<p>See <a href="https://developer.apple.com/library/mac/documentation/graphicsimaging/reference/CALayer_class/Introduction/Introduction.html#//apple_ref/occ/instp/CALayer/shadowPath">Apple&#8217;s CALayer documentation</a> where they say:</p>

<blockquote><p>If the value in this property is non-nil, the shadow is created using the specified path instead of the layer’s composited alpha channel. The path defines the outline of the shadow. It is filled using the non-zero winding rule and the current shadow color, opacity, and blur radius.</p>

<p>Specifying an explicit path usually improves rendering performance.</p></blockquote>

<ul>
<li><p>Similarly, using <code>layer.shouldRasterize = YES;</code> should increase performance (See the <a href="http://www.omnigroup.com/blog/entry/ipad_drop_shadow_performance_test/">iPad drop shadow performance</a> post from <a href="http://www.omnigroup.com/">The Omni Group</a>.</p></li>
<li><p>However, be <em>sure</em> to set the <code>layer.rasterizationScale</code> appropriately or you are likely to see pixelated content. This can easily be achieved by: <code>layer.rasterizationScale = [[UIScreen mainScreen] scale];</code></p></li>
</ul>


<p>So, to recap&#8230; drop shadows can add some really nice, subtle, depth and need not be an overt performance hit.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CALayer</span> <span class="o">*</span><span class="n">layer</span><span class="p">;</span> <span class="c1">//Assumed to be initialized somewhere else</span>
</span><span class='line'><span class="n">layer</span><span class="p">.</span><span class="n">shadowPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIBezierPath</span> <span class="nl">bezierPathWithRect:</span><span class="n">layer</span><span class="p">.</span><span class="n">bounds</span><span class="p">].</span><span class="n">CGPath</span><span class="p">;</span>
</span><span class='line'><span class="n">layer</span><span class="p">.</span><span class="n">shouldRasterize</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">layer</span><span class="p">.</span><span class="n">rasterizationScale</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">scale</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elegant JSON Pretty Print for BBEdit]]></title>
    <link href="http://levigroker.github.com/blog/2012/09/07/elegant-json-pretty-print-for-bbedit/"/>
    <updated>2012-09-07T10:52:00-06:00</updated>
    <id>http://levigroker.github.com/blog/2012/09/07/elegant-json-pretty-print-for-bbedit</id>
    <content type="html"><![CDATA[<p>Working with JSON in BBEdit is great, but reading JSON is greatly enhanced by having it formatted nicely, and BBEdit doesn&#8217;t have anything (that I&#8217;ve found) which supports pretty printing JSON by default.</p>

<p>A while ago I found this post <a href="http://crisp.tumblr.com/post/2574967567/json-pretty-print-formatting-in-bbedit">http://crisp.tumblr.com/post/2574967567/json-pretty-print-formatting-in-bbedit</a> which worked great, but I ran into <a href="http://coderwall.com/p/g1cm2g">this elegant little snippet</a>. Inspired, I created a much simpler Text Filter for BBEdit:</p>

<div><script src='https://gist.github.com/3667653.js'></script>
<noscript><pre><code>#!/bin/bash
python -m json.tool
</code></pre></noscript></div>


<p>(drop this file in your <code>~/Library/Application Support/BBEdit/Text Filters</code> directory and then you can select it from BBEdit&#8217;s Text->Apply Text Filter menu.</p>

<h2>Update</h2>

<h6>(Monday, September 24 2012)</h6>

<p>A little less elegant in the script, but this updated version has a nicer output:</p>

<div><script src='https://gist.github.com/3777091.js'></script>
<noscript><pre><code>#!/bin/bash
python -c &quot;import sys, json; print json.dumps(json.load(sys.stdin), indent=2)&quot;</code></pre></noscript></div>


<p>(Thanks to Bob Foster for this version)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Give me back my ~/Library (!)]]></title>
    <link href="http://levigroker.github.com/blog/2012/09/07/give-me-back-my-%7E-slash-library/"/>
    <updated>2012-09-07T10:39:00-06:00</updated>
    <id>http://levigroker.github.com/blog/2012/09/07/give-me-back-my-~-slash-library</id>
    <content type="html"><![CDATA[<p>As a developer I need access to my Library directory, but Apple keeps hiding it from me with every OS update. Finally tired of manually typing <code>chflags nohidden ~/Library/</code> every time it disappeared, I created a simple LaunchAgent to do this for me every time I log into my machine.</p>

<p>Check it out:</p>

<div><script src='https://gist.github.com/3667585.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.levigroker.unhide_library&lt;/string&gt;
    &lt;key&gt;LingonWhat&lt;/key&gt;
    &lt;string&gt;/Users/levi/Library/Automation/unhide_library.sh&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/levi/Library/Automation/unhide_library.sh&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre></noscript></div>


<p>As an aside, I&#8217;ll take this space to plug <a href="http://www.peterborgapps.com/lingon/">Lingon</a> (I have no affiliation), which is a nice GUI tool for managing LaunchAgents and saves you from editing XML and dropping to the command line to talk to <code>launchd</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Override Deprecated API Warning]]></title>
    <link href="http://levigroker.github.com/blog/2012/05/07/override-deprecated-api-warning/"/>
    <updated>2012-05-07T15:58:00-06:00</updated>
    <id>http://levigroker.github.com/blog/2012/05/07/override-deprecated-api-warning</id>
    <content type="html"><![CDATA[<p>Sometimes I need to make a call to a deprecated API (for DEBUG builds only, of course) and don&#8217;t want to see the warning. This little preprocessor tip will hide that warning:</p>

<div><script src='https://gist.github.com/2630702.js'></script>
<noscript><pre><code>#ifdef DEBUG
#pragma clang diagnostic push
#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;
    [TestFlight setDeviceIdentifier:[[UIDevice currentDevice] uniqueIdentifier]];
#pragma clang diagnostic pop
#endif
</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData Browsing]]></title>
    <link href="http://levigroker.github.com/blog/2012/03/15/coredata-browsing/"/>
    <updated>2012-03-15T17:01:00-06:00</updated>
    <id>http://levigroker.github.com/blog/2012/03/15/coredata-browsing</id>
    <content type="html"><![CDATA[<p>Found a handy tool for browsing core data on the simulator. It&#8217;s not very polished, but it allows you to perform fetch requests with predicates and get back results, which helps immensely when trying to understand what&#8217;s happening inside your app&#8217;s data at runtime.
Check it out:</p>

<p><a href="http://atastypixel.com/blog/browsing-core-data-databases-using-f-script">http://atastypixel.com/blog/browsing-core-data-databases-using-f-script/</a></p>

<p>I also found this answer on SO which helped me get bootstrapped by giving the location of the two needed files in the simulator:</p>

<p><a href="http://stackoverflow.com/a/5998072/397210">http://stackoverflow.com/a/5998072/397210</a></p>

<p>Happy CoreData spelunking!</p>

<p>P.S. <a href="https://twitter.com/tomhoag">@tomhoag</a> suggested this <a href="https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager">https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/</a> as well&#8230; looks handy!</p>

<h2>Update</h2>

<h6>(Monday, September 24 2012)</h6>

<p>Since the original post, I&#8217;ve discovered <a href="http://itunes.apple.com/us/app/core-data-editor/id403025957?mt=12">Core Data Editor</a> which is really great and I recommend it. However, the fscript approach allows one to perform predicate based fetch requests which is not something the Core Data Editor supports (at this time?) and is invaluable, so having both tools around is still handy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using NSURLProtocol for Injecting Test Data]]></title>
    <link href="http://levigroker.github.com/blog/2012/01/24/using-nsurlprotocol-for-injecting-test-data/"/>
    <updated>2012-01-24T15:54:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2012/01/24/using-nsurlprotocol-for-injecting-test-data</id>
    <content type="html"><![CDATA[<p>I found <a href="http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/">this</a> extremely useful for mocking up calls to network services.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous GHUnit Tests &amp; Objective C Foo!]]></title>
    <link href="http://levigroker.github.com/blog/2012/01/19/asynchronous-ghunit-tests-and-objective-c-foo/"/>
    <updated>2012-01-19T17:33:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2012/01/19/asynchronous-ghunit-tests-and-objective-c-foo</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/gabriel/gh-unit">GHUnit</a> is quite useful for running and reporting tests (unit or otherwise) for iOS projects, and I&#8217;ve been using it for a while with good results. Recently, however, I found as I wrote more and more integration-style tests with a remote HTTP service I found the code getting to be a pain to write and maintain.
There were two reasons for this:</p>

<h4>GHAssert variants fail with an Exception, and therefore other tests do not continue to execute.</h4>

<p>This was a real drag, since the assert macros are pretty handy, but I want all my tests to run, even if some fail (<em>gasp</em> I know!).</p>

<p>So, I ended up replacing the GHAsserts with a simple conditional, which doesn&#8217;t feel as clean, but navigates around the issue.</p>

<h4>Selector names became copy and paste heavy.</h4>

<p>Since I&#8217;m making notification calls like <code>[self notify:kGHUnitWaitStatusSuccess forSelector:@selector(testAsynchronousOperation)];</code> from within the same method it was additional grunt work to copy the selector name to all the places I needed a reference to the selector.</p>

<p>I thought of adding a <code>SEL mySelector = @selector(foo);</code> to each method, which would cut down on the copy &amp; pasting, but that just didn&#8217;t seem clean to me.</p>

<p>I discovered there is an Objective C variable like <code>self</code> called <code>_cmd</code><a href="http://www.google.com/search?client=safari&amp;rls=en&amp;q=objective+c+_cmd&amp;ie=UTF-8&amp;oe=UTF-8">*</a> which is a reference to the current selector(!). That&#8217;s cool, and simplifies code like my testing code a lot.</p>

<h4>Sample</h4>

<p>For the specific kinds of test cases I was writing, here&#8217;s an example which shows both of these issues resolved:</p>

<div><script src='https://gist.github.com/1643797.js'></script>
<noscript><pre><code>#import &lt;GHUnitIOS/GHUnit.h&gt; 

@interface RemoteDataServiceTest : GHAsyncTestCase { }
@end

@implementation RemoteDataServiceTest

- (BOOL)shouldRunOnMainThread
{
    // By default NO, but if you have a UI test or test dependent on running on the main thread return YES.
    // Also an async test that calls back on the main thread, you'll probably want to return YES.
    return NO;
}
- (void)testAsynchronousOperation
{
    // Call prepare to setup the asynchronous action.
    // This helps in cases where the action is synchronous and the
    // action occurs before the wait is actually called.
    [self prepare];
    
    [RemoteDataService doNiftyStuffRemotelyWithCompletedBlock:^(id result){
        if (!result)
        {
            GHTestLog(@&quot;result from remote service was unexpectedly nil.&quot;);
            [self notify:kGHUnitWaitStatusFailure forSelector:_cmd];
            return;
        }
        GHTestLog(@&quot;We got back: %@&quot;, result);
        [self notify:kGHUnitWaitStatusSuccess forSelector:_cmd];
    } errorBlock:^(NSError *error){
        GHTestLog(@&quot;Error while doing nifty stuff: %@&quot;, [error localizedDescription]);
        [self notify:kGHUnitWaitStatusFailure forSelector:_cmd];
    }];
    
    // Wait until notify called for timeout (seconds); If notify is not called with kGHUnitWaitStatusSuccess then
    // we will throw an error.
    [self waitForStatus:kGHUnitWaitStatusSuccess timeout:30.0];
}</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ongoing Resources for iOS Knowledge]]></title>
    <link href="http://levigroker.github.com/blog/2012/01/06/ongoing-resources-for-ios-knowledge/"/>
    <updated>2012-01-06T17:47:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2012/01/06/ongoing-resources-for-ios-knowledge</id>
    <content type="html"><![CDATA[<p>Since my last post on <a href="blog/2011/12/09/learning-ios/">learning iOS</a> I&#8217;ve been asked about the <em>Continuous</em> section and what resources/people/blogs etc. I recommend following.</p>

<p>To be clear, there&#8217;s no way to even scratch the surface for all the really great people in this community who should be paid attention to (I continuously find new great people and welcome introductions too!), so please don&#8217;t take this as a comprehensive list, but just a place to start&#8230; Also, it&#8217;s a good idea to keep up on Apple related news, but that&#8217;s a different beastie altogether.</p>

<h3>Blogs (in no particular order)</h3>

<ul>
<li><a href="http://cocoawithlove.com/">http://cocoawithlove.com/</a></li>
<li><a href="http://www.cimgf.com/">http://www.cimgf.com/</a></li>
<li><a href="http://iphonedevelopment.blogspot.com">http://iphonedevelopment.blogspot.com/</a></li>
<li><a href="http://iphonedevelopment.blogspot.com">http://idevblogaday.com/</a></li>
</ul>


<h3>Tweeters (in no particular order)</h3>

<ul>
<li><a href="https://twitter.com/mikeash">@mikeash</a></li>
<li><a href="https://twitter.com/alanQuatermain">@alanQuatermain</a></li>
<li><a href="https://twitter.com/atomicbird">@atomicbird</a></li>
<li><a href="https://twitter.com/bdudney">@bdudney</a></li>
<li><a href="https://twitter.com/bmf">@bmf</a></li>
<li><a href="https://twitter.com/brandontreb">@brandontreb</a></li>
<li><a href="https://twitter.com/brentsimmons">@brentsimmons</a></li>
<li><a href="https://twitter.com/cocoawithlove">@cocoawithlove</a></li>
<li><a href="https://twitter.com/deadmeta4">@deadmeta4</a></li>
<li><a href="https://twitter.com/drance">@drance</a></li>
<li><a href="https://twitter.com/jeff_lamarche">@jeff_lamarche</a></li>
<li><a href="https://twitter.com/mattgemmell">@mattgemmell</a></li>
<li><a href="https://twitter.com/mattt">@mattt</a></li>
<li><a href="https://twitter.com/mick_lester">@mick_lester</a></li>
<li><a href="https://twitter.com/mmartel">@mmartel</a></li>
<li><a href="https://twitter.com/MobileOrchard">@MobileOrchard</a></li>
<li><a href="https://twitter.com/mugunthkumar">@mugunthkumar</a></li>
<li><a href="https://twitter.com/mystcolor">@mystcolor</a></li>
<li><a href="https://twitter.com/mzarra">@mzarra</a></li>
<li><a href="https://twitter.com/nattylux">@nattylux</a></li>
<li><a href="https://twitter.com/neror">@neror</a></li>
<li><a href="https://twitter.com/noel_llopis">@noel_llopis</a></li>
<li><a href="https://twitter.com/RemoteVision">@RemoteVision</a></li>
<li><a href="https://twitter.com/rwenderlich">@rwenderlich</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning iOS]]></title>
    <link href="http://levigroker.github.com/blog/2011/12/09/learning-ios/"/>
    <updated>2011-12-09T17:01:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2011/12/09/learning-ios</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently been asked a couple times about resources for developers who want to get into iOS development. I don&#8217;t pretend to be an expert, and am constantly learning myself, but these resources are ones I find useful, believe would be good for people just starting, and should certainly get you started. There&#8217;s <em>lots</em> of information out there, so don&#8217;t get too overwhelmed.</p>

<h2>The First Place</h2>

<p>I&#8217;d start is with a <a href="http://www.amazon.com/iPhone-Programming-Ranch-Guide-Guides/dp/0321706242/ref=pd_sim_b_5" title="">good book</a>. Aaron Hillegass is <em>the</em> goto guy for learning Cocoa and Objective C.</p>

<p>Second, Apple&#8217;s documentation is quite good and will be your constant companion. Use the Documentation tab of the Xcode Organizer to search and browse the docs. There are many many sample code projects on various topics.</p>

<p>The <a href="http://developer.apple.com/library/ios/navigation/" title="">docs are also online</a>&#8230; some good starting places are:</p>

<ul>
<li><a href="http://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Getting%20Started">Getting Started</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html#//apple_ref/doc/uid/TP30001163">Objective C Intorduction</a></li>
</ul>


<p>View Controllers are the &#8220;main entry point&#8221; when using UIKit. It is important to understand them&#8230; many iOS devs do not (I was making fatal mistakes for my first year!). Read Apple&#8217;s <a href="http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html">View Controller Programming Guide</a> until it makes sense. Paying particular heed to the view hierarchy and view controller hierarchy concepts.</p>

<h2>Attend a Conference/Course</h2>

<p>If you&#8217;re at all like me, you&#8217;ll most likely come away inspired and energized to build cool stuff. I&#8217;ve been to two <a href="http://360idev.com/" title="">360iDev</a>&#8217;s now and loved them both. Highly recommend.</p>

<p>The <a href="http://pragmaticstudio.com/iphone">Pragmatic Studio</a> just announced a session which looks promising.</p>

<h2>Continuous</h2>

<p>Follow people on Twitter who talk about iOS and Cocoa. There&#8217;s a lot of people out there with a lot of experience.</p>

<p>This should lead you to some great blog posts and open source projects which will help you learn and grow, as they continue to do for me.</p>

<p>Check out <a href="http://www.raywenderlich.com">Ray Wenderlinch</a>&#8217;s site for some great intro to intermediate tutorials to get you going.</p>

<p>A <em>great</em> place to go for answers is <a href="http://stackoverflow.com/">StackOverflow</a>. Search before you post&#8230; it&#8217;s probably been asked (and answered) already.</p>

<h2>Lot&#8217;s to know</h2>

<p>There is a difference between intelligence and knowledge. Do not sell yourself short.</p>

<h2>Give Back</h2>

<p>Probably about the most astounding thing I encountered when I first joined this community, for that is what it is, was the unselfish and unpretentious giving of knowledge and experience. There is an amazing amount of source code out there, for free. People are writing blogs and answering questions <em>all the time</em>. When you have the experience, pay it forward and help the community by sharing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ranged Random Numbers in Objective C]]></title>
    <link href="http://levigroker.github.com/blog/2011/12/05/ranged-random-numbers-in-objective-c/"/>
    <updated>2011-12-05T12:47:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2011/12/05/ranged-random-numbers-in-objective-c</id>
    <content type="html"><![CDATA[<p>Sounds pretty basic, and it is, but like many things there are lots of ways to do it. This is my new favorite:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">u_int32_t</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="n">u_int32_t</span> <span class="cm">/*upper_bound*/</span><span class="p">)</span> <span class="n">__OSX_AVAILABLE_STARTING</span><span class="p">(</span><span class="n">__MAC_10_7</span><span class="p">,</span> <span class="n">__IPHONE_4_3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on <a href="http://stackoverflow.com/a/7082580/397210">discussions on StackOverflow</a> and my own testing.</p>

<p>This assumes you&#8217;re on iOS 4.3 or later, however.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anonymous FTP on Lion]]></title>
    <link href="http://levigroker.github.com/blog/2011/11/07/anonymous-ftp-on-lion/"/>
    <updated>2011-11-07T13:14:00-07:00</updated>
    <id>http://levigroker.github.com/blog/2011/11/07/anonymous-ftp-on-lion</id>
    <content type="html"><![CDATA[<h2>Start:</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo dscl . -create /Users/ftp
</span><span class='line'>sudo dscl . -create /Users/ftp NFSHomeDirectory /Users/labrown/Public/ftp
</span><span class='line'>sudo launchctl load -w /System/Library/LaunchDaemons/ftp.plist
</span></code></pre></td></tr></table></div></figure>


<h2>Stop:</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo launchctl unload -w /System/Library/LaunchDaemons/ftp.plist
</span><span class='line'>sudo dscl . -delete /Users/ftp
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
